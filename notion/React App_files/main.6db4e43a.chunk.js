(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{48:function(e,n,t){e.exports=t(57)},53:function(e,n,t){},57:function(e,n,t){"use strict";t.r(n);var a=t(0),o=t.n(a),r=t(7),i=t.n(r),s=t(18),l=t(10),c=t(91),u=t(93),p=t(92),d=t(90);function m(e){try{var n=new URL(e).pathname.slice(-32);return n.match(/[0-9a-f]{32}/)?n:""}catch(t){return""}}t(53);var h="fruitionsite.com",g="https://stephenou.notion.site/771ef38657244c27b9389734a9cbff44";function b(){var e=Object(a.useState)([]),n=Object(l.a)(e,2),t=n[0],r=n[1],i=Object(a.useState)(""),b=Object(l.a)(i,2),f=b[0],v=b[1],y=Object(a.useState)(""),O=Object(l.a)(y,2),S=O[0],w=O[1],E=Object(a.useState)(""),A=Object(l.a)(E,2),T=A[0],_=A[1],G=Object(a.useState)(""),P=Object(l.a)(G,2),L=P[0],x=P[1],C=Object(a.useState)(""),k=Object(l.a)(C,2),R=k[0],M=k[1],I=Object(a.useState)(""),U=Object(l.a)(I,2),N=U[0],j=U[1],D=Object(a.useState)(!1),q=Object(l.a)(D,2),H=q[0],W=q[1],F=Object(a.useState)(!1),Y=Object(l.a)(F,2),z=Y[0],B=Y[1],$=f||h,X=S||g,J=function(e){return e.match(/^((https:\/\/)|(http:\/\/))?[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+(\/)?$/)}($)?void 0:"Please enter a valid domain",Z=function(e){if(!e)return!0;try{var n=new URL(e);return(n.hostname.endsWith("notion.so")||n.hostname.endsWith("notion.site"))&&n.pathname.slice(-32).match(/[0-9a-f]{32}/)}catch(t){return!1}}(S)?void 0:"Please enter a valid Notion Page URL",K=!J&&!Z,Q=K?function(e){var n=e.myDomain,t=e.notionUrl,a=e.slugs,o=e.pageTitle,r=e.pageDescription,i=e.googleFont,s=e.customScript,c=n.replace("https://","").replace("http://","");return"/"===c.slice(-1)&&(c=c.slice(0,c.length-1)),"  /* CONFIGURATION STARTS HERE */\n  \n  /* Step 1: enter your domain name like fruitionsite.com */\n  const MY_DOMAIN = '".concat(c,"';\n  \n  /*\n   * Step 2: enter your URL slug to page ID mapping\n   * The key on the left is the slug (without the slash)\n   * The value on the right is the Notion page ID\n   */\n  const SLUG_TO_PAGE = {\n    '': '").concat(m(t),"',\n").concat(a.map(function(e){var n=Object(l.a)(e,2),t=n[0],a=m(n[1]);return a&&t?"    '".concat(t,"': '").concat(a,"',\n"):""}).join(""),"  };\n  \n  /* Step 3: enter your page title and description for SEO purposes */\n  const PAGE_TITLE = '").concat(o||"","';\n  const PAGE_DESCRIPTION = '").concat(r||"","';\n  \n  /* Step 4: enter a Google Font name, you can choose from https://fonts.google.com */\n  const GOOGLE_FONT = '").concat(i||"","';\n  \n  /* Step 5: enter any custom scripts you'd like */\n  const CUSTOM_SCRIPT = `").concat(s||"","`;\n  \n  /* CONFIGURATION ENDS HERE */\n  \n  const PAGE_TO_SLUG = {};\n  const slugs = [];\n  const pages = [];\n  Object.keys(SLUG_TO_PAGE).forEach(slug => {\n    const page = SLUG_TO_PAGE[slug];\n    slugs.push(slug);\n    pages.push(page);\n    PAGE_TO_SLUG[page] = slug;\n  });\n  \n  addEventListener('fetch', event => {\n    event.respondWith(fetchAndApply(event.request));\n  });\n\n  function generateSitemap() {\n    let sitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">';\n    slugs.forEach(\n      (slug) =>\n        (sitemap +=\n          '<url><loc>https://' + MY_DOMAIN + '/' + slug + '</loc></url>')\n    );\n    sitemap += '</urlset>';\n    return sitemap;\n  }\n  \n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, HEAD, POST, PUT, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type',\n  };\n  \n  function handleOptions(request) {\n    if (request.headers.get('Origin') !== null &&\n      request.headers.get('Access-Control-Request-Method') !== null &&\n      request.headers.get('Access-Control-Request-Headers') !== null) {\n      // Handle CORS pre-flight request.\n      return new Response(null, {\n        headers: corsHeaders\n      });\n    } else {\n      // Handle standard OPTIONS request.\n      return new Response(null, {\n        headers: {\n          'Allow': 'GET, HEAD, POST, PUT, OPTIONS',\n        }\n      });\n    }\n  }\n  \n  async function fetchAndApply(request) {\n    if (request.method === 'OPTIONS') {\n      return handleOptions(request);\n    }\n    let url = new URL(request.url);\n    url.hostname = 'www.notion.so';\n    if (url.pathname === '/robots.txt') {\n      return new Response('Sitemap: https://' + MY_DOMAIN + '/sitemap.xml');\n    }\n    if (url.pathname === '/sitemap.xml') {\n      let response = new Response(generateSitemap());\n      response.headers.set('content-type', 'application/xml');\n      return response;\n    }\n    let response;\n    if (url.pathname.startsWith('/app') && url.pathname.endsWith('js')) {\n      response = await fetch(url.toString());\n      let body = await response.text();\n      response = new Response(body.replace(/www.notion.so/g, MY_DOMAIN).replace(/notion.so/g, MY_DOMAIN), response);\n      response.headers.set('Content-Type', 'application/x-javascript');\n      return response;\n    } else if ((url.pathname.startsWith('/api'))) {\n      // Forward API\n      response = await fetch(url.toString(), {\n        body: url.pathname.startsWith('/api/v3/getPublicPageData') ? null : request.body,\n        headers: {\n          'content-type': 'application/json;charset=UTF-8',\n          'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'\n        },\n        method: 'POST',\n      });\n      response = new Response(response.body, response);\n      response.headers.set('Access-Control-Allow-Origin', '*');\n      return response;\n    } else if (slugs.indexOf(url.pathname.slice(1)) > -1) {\n      const pageId = SLUG_TO_PAGE[url.pathname.slice(1)];\n      return Response.redirect('https://' + MY_DOMAIN + '/' + pageId, 301);\n    } else {\n      response = await fetch(url.toString(), {\n        body: request.body,\n        headers: request.headers,\n        method: request.method,\n      });\n      response = new Response(response.body, response);\n      response.headers.delete('Content-Security-Policy');\n      response.headers.delete('X-Content-Security-Policy');\n    }\n  \n    return appendJavascript(response, SLUG_TO_PAGE);\n  }\n  \n  class MetaRewriter {\n    element(element) {\n      if (PAGE_TITLE !== '') {\n        if (element.getAttribute('property') === 'og:title'\n          || element.getAttribute('name') === 'twitter:title') {\n          element.setAttribute('content', PAGE_TITLE);\n        }\n        if (element.tagName === 'title') {\n          element.setInnerContent(PAGE_TITLE);\n        }\n      }\n      if (PAGE_DESCRIPTION !== '') {\n        if (element.getAttribute('name') === 'description'\n          || element.getAttribute('property') === 'og:description'\n          || element.getAttribute('name') === 'twitter:description') {\n          element.setAttribute('content', PAGE_DESCRIPTION);\n        }\n      }\n      if (element.getAttribute('property') === 'og:url'\n        || element.getAttribute('name') === 'twitter:url') {\n        element.setAttribute('content', MY_DOMAIN);\n      }\n      if (element.getAttribute('name') === 'apple-itunes-app') {\n        element.remove();\n      }\n    }\n  }\n  \n  class HeadRewriter {\n    element(element) {\n      if (GOOGLE_FONT !== '') {\n        element.append(`<link href=\"https://fonts.googleapis.com/css?family=${GOOGLE_FONT.replace(' ', '+')}:Regular,Bold,Italic&display=swap\" rel=\"stylesheet\">\n        <style>* { font-family: \"${GOOGLE_FONT}\" !important; }</style>`, {\n          html: true\n        });\n      }\n      element.append(`<style>\n      div.notion-topbar > div > div:nth-child(3) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(4) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(5) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(6) { display: none !important; }\n      div.notion-topbar-mobile > div:nth-child(3) { display: none !important; }\n      div.notion-topbar-mobile > div:nth-child(4) { display: none !important; }\n      div.notion-topbar > div > div:nth-child(1n).toggle-mode { display: block !important; }\n      div.notion-topbar-mobile > div:nth-child(1n).toggle-mode { display: block !important; }\n      </style>`, {\n        html: true\n      })\n    }\n  }\n  \n  class BodyRewriter {\n    constructor(SLUG_TO_PAGE) {\n      this.SLUG_TO_PAGE = SLUG_TO_PAGE;\n    }\n    element(element) {\n      element.append(`<div style=\"display:none\">Powered by <a href=\"http://fruitionsite.com\">Fruition</a></div>\n      <script>\n      window.CONFIG.domainBaseUrl = 'https://${MY_DOMAIN}';\n      const SLUG_TO_PAGE = ${JSON.stringify(this.SLUG_TO_PAGE)};\n      const PAGE_TO_SLUG = {};\n      const slugs = [];\n      const pages = [];\n      const el = document.createElement('div');\n      let redirected = false;\n      Object.keys(SLUG_TO_PAGE).forEach(slug => {\n        const page = SLUG_TO_PAGE[slug];\n        slugs.push(slug);\n        pages.push(page);\n        PAGE_TO_SLUG[page] = slug;\n      });\n      function getPage() {\n        return location.pathname.slice(-32);\n      }\n      function getSlug() {\n        return location.pathname.slice(1);\n      }\n      function updateSlug() {\n        const slug = PAGE_TO_SLUG[getPage()];\n        if (slug != null) {\n          history.replaceState(history.state, '', '/' + slug);\n        }\n      }\n      function onDark() {\n        el.innerHTML = '<div title=\"Change to Light Mode\" style=\"margin-left: auto; margin-right: 14px; min-width: 0px;\"><div role=\"button\" tabindex=\"0\" style=\"user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;\"><div style=\"display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgb(46, 170, 220); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;\"><div style=\"width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(12px) translateY(0px);\"></div></div></div></div>';\n        document.body.classList.add('dark');\n        __console.environment.ThemeStore.setState({ mode: 'dark' });\n      };\n      function onLight() {\n        el.innerHTML = '<div title=\"Change to Dark Mode\" style=\"margin-left: auto; margin-right: 14px; min-width: 0px;\"><div role=\"button\" tabindex=\"0\" style=\"user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;\"><div style=\"display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgba(135, 131, 120, 0.3); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;\"><div style=\"width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(0px) translateY(0px);\"></div></div></div></div>';\n        document.body.classList.remove('dark');\n        __console.environment.ThemeStore.setState({ mode: 'light' });\n      }\n      function toggle() {\n        if (document.body.classList.contains('dark')) {\n          onLight();\n        } else {\n          onDark();\n        }\n      }\n      function addDarkModeButton(device) {\n        const nav = device === 'web' ? document.querySelector('.notion-topbar').firstChild : document.querySelector('.notion-topbar-mobile');\n        el.className = 'toggle-mode';\n        el.addEventListener('click', toggle);\n        nav.appendChild(el);\n        onLight();\n      }\n      const observer = new MutationObserver(function() {\n        if (redirected) return;\n        const nav = document.querySelector('.notion-topbar');\n        const mobileNav = document.querySelector('.notion-topbar-mobile');\n        if (nav && nav.firstChild && nav.firstChild.firstChild\n          || mobileNav && mobileNav.firstChild) {\n          redirected = true;\n          updateSlug();\n          addDarkModeButton(nav ? 'web' : 'mobile');\n          const onpopstate = window.onpopstate;\n          window.onpopstate = function() {\n            if (slugs.includes(getSlug())) {\n              const page = SLUG_TO_PAGE[getSlug()];\n              if (page) {\n                history.replaceState(history.state, 'bypass', '/' + page);\n              }\n            }\n            onpopstate.apply(this, [].slice.call(arguments));\n            updateSlug();\n          };\n        }\n      });\n      observer.observe(document.querySelector('#notion-app'), {\n        childList: true,\n        subtree: true,\n      });\n      const replaceState = window.history.replaceState;\n      window.history.replaceState = function(state) {\n        if (arguments[1] !== 'bypass' && slugs.includes(getSlug())) return;\n        return replaceState.apply(window.history, arguments);\n      };\n      const pushState = window.history.pushState;\n      window.history.pushState = function(state) {\n        const dest = new URL(location.protocol + location.host + arguments[2]);\n        const id = dest.pathname.slice(-32);\n        if (pages.includes(id)) {\n          arguments[2] = '/' + PAGE_TO_SLUG[id];\n        }\n        return pushState.apply(window.history, arguments);\n      };\n      const open = window.XMLHttpRequest.prototype.open;\n      window.XMLHttpRequest.prototype.open = function() {\n        arguments[1] = arguments[1].replace('${MY_DOMAIN}', 'www.notion.so');\n        return open.apply(this, [].slice.call(arguments));\n      };\n    <\/script>${CUSTOM_SCRIPT}`, {\n        html: true\n      });\n    }\n  }\n  \n  async function appendJavascript(res, SLUG_TO_PAGE) {\n    return new HTMLRewriter()\n      .on('title', new MetaRewriter())\n      .on('meta', new MetaRewriter())\n      .on('head', new HeadRewriter())\n      .on('body', new BodyRewriter(SLUG_TO_PAGE))\n      .transform(res);\n  }")}({myDomain:$,notionUrl:X,slugs:t,pageTitle:T,pageDescription:L,googleFont:R,customScript:N}):void 0,V=Object(a.useRef)("");return o.a.createElement("section",{style:{maxWidth:666}},o.a.createElement(c.a,{fullWidth:!0,helperText:J,label:"Your Domain (e.g. example.org)",onChange:function(e){v(e.target.value),B(!1)},margin:"normal",placeholder:h,value:f,variant:"outlined"}),o.a.createElement(c.a,{fullWidth:!0,helperText:Z,label:"Notion URL for ".concat($),margin:"normal",onChange:function(e){w(e.target.value),B(!1)},placeholder:g,value:S,variant:"outlined"}),t.map(function(e,n){var a=Object(l.a)(e,2),i=a[0],d=a[1];return o.a.createElement("section",null,o.a.createElement(c.a,{fullWidth:!0,InputProps:{startAdornment:o.a.createElement(u.a,{position:"start"},"".concat($,"/"))},key:"key",label:"Pretty Link",margin:"normal",placeholder:"about",onChange:function(e){return function(e,n){r([].concat(Object(s.a)(t.slice(0,n)),[[e,t[n][1]]],Object(s.a)(t.slice(n+1)))),B(!1)}(e.target.value,n)},value:i,variant:"outlined"}),o.a.createElement(c.a,{fullWidth:!0,label:"Notion URL for ".concat($,"/").concat(i||"about"),key:"value",margin:"normal",placeholder:g,onChange:function(e){return function(e,n){r([].concat(Object(s.a)(t.slice(0,n)),[[t[n][0],e]],Object(s.a)(t.slice(n+1)))),B(!1)}(e.target.value,n)},value:d,variant:"outlined"}),o.a.createElement(p.a,{onClick:function(){return function(e){r([].concat(Object(s.a)(t.slice(0,e)),Object(s.a)(t.slice(e+1)))),B(!1)}(n)},variant:"outlined",color:"secondary",size:"small"},"Delete this pretty link"))}),o.a.createElement("section",null,o.a.createElement(p.a,{onClick:function(){r([].concat(Object(s.a)(t),[["",""]])),B(!1)},size:"small",variant:"outlined",color:"primary"},"Add a pretty link")),o.a.createElement("section",null,o.a.createElement(p.a,{onClick:function(){W(!H)},size:"small",variant:"outlined",color:"primary"},"Toggle Style And Script Settings")),o.a.createElement(d.a,{in:H,timeout:"auto",unmountOnExit:!0},o.a.createElement(c.a,{fullWidth:!0,label:"Page Title",margin:"normal",onChange:function(e){_(e.target.value),B(!1)},value:T,variant:"outlined"}),o.a.createElement(c.a,{fullWidth:!0,label:"Page Description",margin:"normal",onChange:function(e){x(e.target.value),B(!1)},value:L,variant:"outlined"}),o.a.createElement(c.a,{fullWidth:!0,label:"Custom Google Font",margin:"normal",placeholder:"Open Sans",onChange:function(e){M(e.target.value),B(!1)},value:R,variant:"outlined"}),o.a.createElement(c.a,{fullWidth:!0,label:"Paste Your Custom Script",margin:"normal",multiline:!0,placeholder:"e.g. Google Analytics",onChange:function(e){j(e.target.value),B(!1)},rows:2,value:N,variant:"outlined"})),o.a.createElement("section",null,o.a.createElement(p.a,{disabled:!K,variant:"contained",color:"primary",disableElevation:!0,onClick:function(){K&&(V.current.select(),document.execCommand("copy"),B(!0))}},z?"Copied!":"Copy the code")),K?o.a.createElement(o.a.Fragment,null,o.a.createElement(c.a,{fullWidth:!0,margin:"normal",rowsMax:5,multiline:!0,inputRef:V,value:Q,variant:"outlined"})):"")}var f=document.getElementById("root");i.a.render(o.a.createElement(o.a.StrictMode,null,o.a.createElement(b,null)),f)}},[[48,1,2]]]);
//# sourceMappingURL=main.6db4e43a.chunk.js.map